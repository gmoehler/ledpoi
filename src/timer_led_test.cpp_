/*
07.03.2017: Server funktioniert.
Komisch: Vivaldi fragt IMMMER zusätzlich das favicon ab (Mozilla nur bei der ersten Verbindung
Vivaldi öffnet nach der eigentlichen Anfrage noch eine TCP Verbindung, die aber nichts sendet, sondern nur die Verbindung offen hält.
Das freezed den Server, wenn man nicht einen einfachen Timeout implementiert (TCPtimeoutCt)

*/

#include <Arduino.h>
#include "esp_system.h"
#include "esp_partition.h"
#include "nvs_flash.h"
#include "nvs.h"
#include "esp_vfs.h"
#include "esp_system.h"

extern "C" {
    #include "esp_vfs_fat.h"
}

#define DIMX 10
#define DIMY 2

#define STORAGE_NAMESPACE "storage"
#define IMAGE_NAMESPACE "poiImage"
#define PROGRAM_NAMESPACE "poiProgram"

static const char *TAG = "example";

// Handle of the wear levelling library instance
static wl_handle_t s_wl_handle = WL_INVALID_HANDLE;

// Mount path for the partition
const char *base_path = "/spiflash";


esp_err_t save_restart_counter(void)
{
    nvs_handle my_handle;
    esp_err_t err;

    // Open
    err = nvs_open(STORAGE_NAMESPACE, NVS_READWRITE, &my_handle);
    if (err != ESP_OK) return err;

    // Read
    int32_t restart_counter = 0; // value will default to 0, if not set yet in NVS
    err = nvs_get_i32(my_handle, "restart_conter", &restart_counter);
    if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) return err;

    // Write
    restart_counter++;
    err = nvs_set_i32(my_handle, "restart_conter", restart_counter);
    if (err != ESP_OK) return err;

    // Commit written value.
    // After setting any values, nvs_commit() must be called to ensure changes are written
    // to flash storage. Implementations may write to storage at other times,
    // but this is not guaranteed.
    err = nvs_commit(my_handle);
    if (err != ESP_OK) return err;

    // Close
    nvs_close(my_handle);
    return ESP_OK;
}


esp_err_t save_run_time(void)
{
    nvs_handle my_handle;
    esp_err_t err;

    // Open
    err = nvs_open(STORAGE_NAMESPACE, NVS_READWRITE, &my_handle);
    if (err != ESP_OK) return err;

    // Read the size of memory space required for blob
    size_t required_size = 0;  // value will default to 0, if not set yet in NVS
    err = nvs_get_blob(my_handle, "run_time", NULL, &required_size);
    if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) return err;

    // Read previously saved blob if available
    uint32_t* run_time = (uint32_t*) malloc(required_size + sizeof(uint32_t));
    if (required_size > 0) {
        err = nvs_get_blob(my_handle, "run_time", run_time, &required_size);
        if (err != ESP_OK) return err;
    }

    // Write value including previously saved blob if available
    required_size += sizeof(uint32_t);
    run_time[required_size / sizeof(uint32_t) - 1] = xTaskGetTickCount() * portTICK_PERIOD_MS;
    Serial.println(run_time[required_size / sizeof(uint32_t) - 1] );
    err = nvs_set_blob(my_handle, "run_time", run_time, required_size);
    free(run_time);

    if (err != ESP_OK) return err;

    // Commit
    err = nvs_commit(my_handle);
    if (err != ESP_OK) return err;

    // Close
    nvs_close(my_handle);
    return ESP_OK;
}
/* Read from NVS and print restart counter
   and the table with run times.
   Return an error if anything goes wrong
   during this process.
 */
esp_err_t print_what_saved(void)
{
    nvs_handle my_handle;
    esp_err_t err;

    // Open
    err = nvs_open(STORAGE_NAMESPACE, NVS_READWRITE, &my_handle);
    if (err != ESP_OK) return err;

    // Read restart counter
    int32_t restart_counter = 0; // value will default to 0, if not set yet in NVS
    err = nvs_get_i32(my_handle, "restart_conter", &restart_counter);
    if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) return err;
    printf("Restart counter = %d\n", restart_counter);

    uint8_t val = 0; // value will default to 0, if not set yet in NVS
    err = nvs_get_u8(my_handle, "numm", &val);
    if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) return err;
    printf("val = %u\n", val);

    // Read run time blob
    size_t required_size = 0;  // value will default to 0, if not set yet in NVS
    // obtain required memory space to store blob being read from NVS
    err = nvs_get_blob(my_handle, "run_time", NULL, &required_size);
    if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) return err;
    printf("Run time:\n");
    if (required_size == 0) {
        printf("Nothing saved yet!\n");
    } else {
        uint32_t* run_time = (uint32_t*) malloc(required_size);
        err = nvs_get_blob(my_handle, "run_time", run_time, &required_size);
        if (err != ESP_OK) return err;
        for (int i = 0; i < required_size / sizeof(uint32_t); i++) {
            printf("%d: %d\n", i + 1, run_time[i]);
        }
        free(run_time);
    }

    // Close
    nvs_close(my_handle);
    return ESP_OK;
}

esp_err_t save_uint8(const char* mynamespace, const char* key, uint8_t value){
  nvs_handle my_handle;
  esp_err_t err;

  // Open
  printf("Writing uint8_t...\n" );
  err = nvs_open(mynamespace, NVS_READWRITE, &my_handle);
  if (err != ESP_OK) return err;

  err = nvs_set_u8(my_handle, key, value);
  if (err != ESP_OK) return err;

  // Commit
  err = nvs_commit(my_handle);
  if (err != ESP_OK) return err;

  // Close
  nvs_close(my_handle);
  return ESP_OK;
}


esp_err_t save_uint8_array(const char* mynamespace, const char* key, uint8_t *data,
    uint8_t size_x, uint8_t size_y){
  nvs_handle my_handle;
  esp_err_t err;

  // Open
  printf("Writing array...\n" );
  err = nvs_open(mynamespace, NVS_READWRITE, &my_handle);
  if (err != ESP_OK) return err;

  // Write prog values
  size_t required_size = sizeof(uint8_t)*size_x*size_y;
  printf("Size: %d\n", required_size);

  err = nvs_set_blob(my_handle, key, data, required_size);
  if (err != ESP_OK) return err;

  // Commit
  err = nvs_commit(my_handle);
  if (err != ESP_OK) return err;

  // Close
  nvs_close(my_handle);
  return ESP_OK;
}

esp_err_t read_uint8_array(const char* mynamespace, const char* key, uint8_t *data){
  nvs_handle my_handle;
  esp_err_t err;

  // Open
  printf("Reading array...\n" );
  err = nvs_open(mynamespace, NVS_READONLY, &my_handle);
  if (err != ESP_OK) return err;

  // Read the size of memory space required for blob
  size_t data_size = 0;  // value will default to 0, if not set yet in NVS
  err = nvs_get_blob(my_handle, key, NULL, &data_size);
  if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) return err;
  printf("Read size: %d\n", data_size);

  if (data_size > 0) {
      err = nvs_get_blob(my_handle, key, data, &data_size);
      if (err != ESP_OK) return err;
  }
  else {
    return ESP_FAIL; // no data
  }

  printf("Real read size: %d\n", data_size);

  // Close
  nvs_close(my_handle);
  return ESP_OK;
}

esp_err_t read_uint8(const char* mynamespace, const char* key, uint8_t *value){
  nvs_handle my_handle;
  esp_err_t err;

  // Open
  printf("Reading uint8_t...\n" );
  err = nvs_open(mynamespace, NVS_READONLY, &my_handle);
  if (err != ESP_OK) return err;

  err = nvs_get_u8(my_handle, key,  value);
  if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) return err;
  printf("val = %u\n", *value);

  // Close
  nvs_close(my_handle);
  return ESP_OK;
}


void nvs_setup()
{

  esp_err_t err = nvs_flash_init();
      if (err == ESP_ERR_NVS_NO_FREE_PAGES) {
          // NVS partition was truncated and needs to be erased
          const esp_partition_t* nvs_partition = esp_partition_find_first(
                  ESP_PARTITION_TYPE_DATA, ESP_PARTITION_SUBTYPE_DATA_NVS, NULL);
          assert(nvs_partition && "partition table must have an NVS partition");
          ESP_ERROR_CHECK( esp_partition_erase_range(nvs_partition, 0, nvs_partition->size) );
          // Retry nvs_flash_init
          err = nvs_flash_init();
      }
      ESP_ERROR_CHECK( err );

/*      err = print_what_saved();
      if (err != ESP_OK) printf("Error (%d) reading data from NVS!\n", err);

      err = save_restart_counter();
      if (err != ESP_OK) printf("Error (%d) saving restart counter to NVS!\n", err);

      err = save_run_time();
      if (err != ESP_OK) printf("Error (%d) saving run time blob to NVS!\n", err);
*/
      uint8_t data[DIMX][DIMY] = {{1,5}, {5,6}, {7,8}, {7,8}, {7,9}};
      err = save_uint8_array(IMAGE_NAMESPACE, "bla", &data[0][0], DIMX, DIMY);
      if (err != ESP_OK) printf("Error (%04x) saving bla blob to NVS!\n", err);

      err = save_uint8(IMAGE_NAMESPACE, "numm", 4);
      if (err != ESP_OK) printf("Error (%04x) saving bla uint8_t to NVS!\n", err);


      uint8_t data2[DIMX][DIMY];
      err = read_uint8_array(IMAGE_NAMESPACE, "bla", &data2[0][0]);
      if (err != ESP_OK) printf("Error (%04x) reading bla blob from NVS!\n", err);

      uint8_t numRows = DIMX;
      err = read_uint8(IMAGE_NAMESPACE, "numm", &numRows);
      if (err != ESP_OK) printf("Error (%02x) reading uint8_t from NVS!\n", err);

      printf("Data read (%d rows)\n", numRows);
      for (int i=0; i< numRows; i++){
        for (int j=0; j< DIMY; j++){
          printf("%d ",data2[i][j]);
        }
        printf("\n");
      }

}

void vfs_setup(void)
{
    ESP_LOGI(TAG, "Mounting FAT filesystem");
    // To mount device we need name of device partition, define base_path
    // and allow format partition in case if it is new one and was not formated before
    esp_vfs_fat_mount_config_t mount_config;
    mount_config.max_files = 4,
    mount_config.format_if_mount_failed = true;

    esp_err_t err = esp_vfs_fat_spiflash_mount(base_path, "storage", &mount_config, &s_wl_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Failed to mount FATFS (0x%x)", err);
        return;
    }
    ESP_LOGI(TAG, "Opening file");
    FILE *f = fopen("/spiflash/hello.txt", "wb");
    if (f == NULL) {
        ESP_LOGE(TAG, "Failed to open file for writing");
        return;
    }
    fprintf(f, "written using ESP-IDF %s\n", esp_get_idf_version());
    fclose(f);
    ESP_LOGI(TAG, "File written");

    // Open file for reading
    ESP_LOGI(TAG, "Reading file");
    f = fopen("/spiflash/hello.txt", "rb");
    if (f == NULL) {
        ESP_LOGE(TAG, "Failed to open file for reading");
        return;
    }
    char line[128];
    fgets(line, sizeof(line), f);
    fclose(f);
    // strip newline
    char *pos = strchr(line, '\n');
    if (pos) {
        *pos = '\0';
    }
    ESP_LOGI(TAG, "Read from file: '%s'", line);

    // Unmount FATFS
    ESP_LOGI(TAG, "Unmounting FAT filesystem");
    ESP_ERROR_CHECK( esp_vfs_fat_spiflash_unmount(base_path, s_wl_handle));

    ESP_LOGI(TAG, "Done");
}

void partition_mmap_setup(){
  const size_t max_size = 2 * SPI_FLASH_SEC_SIZE;
  const esp_partition_t *p = esp_partition_find_first(ESP_PARTITION_TYPE_DATA,
        ESP_PARTITION_SUBTYPE_DATA_SPIFFS, NULL);

  if (p == 0){
    printf("Partition does not exist.");
    return;
  }

  printf("Using partition %s at 0x%x, size 0x%x\n", p->label, p->address, p->size);
  uint8_t *data = (uint8_t *) malloc(max_size);
  if (data == 0){
    printf("Cannot allocate data.");
    return;
  }

  esp_err_t err = esp_partition_erase_range(p, 0, p->size);
  if (err != ESP_OK){
    printf("Error erasing data range.");
    return;
  }

  srand(0);
  size_t block_size;
  for (size_t offset = 0; offset < p->size; offset += block_size) {
      block_size = ((rand() + 4) % max_size) & (~0x3);
      size_t left = p->size - offset;
      if (block_size > left) {
          block_size = left;
      }
      for (size_t i = 0; i < block_size / 4; ++i) {
          ((uint32_t *) (data))[i] = rand();
      }
      err = esp_partition_write(p, offset, data, block_size);
      if (err != ESP_OK){
        printf("Error erasing data range.");
        return;
      }

  }

  srand(0);
  for (size_t offset = 0; offset < p->size; offset += block_size) {
      block_size = ((rand() + 4) % max_size) & (~0x3);
      size_t left = p->size - offset;
      if (block_size > left) {
          block_size = left;
      }
      err = esp_partition_read(p, offset, data, block_size);
      if (err != ESP_OK){
        printf("Error reading data range.");
        return;
      }

      for (size_t i = 0; i < block_size / 4; ++i) {
          uint32_t val = ((uint32_t *) data)[i];
          uint32_t expected = rand();
          if (val !=   expected){
            printf("%ld != %ld\n", val, expected);
            return;
          }

      }
  }

  free(data);

  const uint32_t *mmap_data;
  spi_flash_mmap_handle_t mmap_handle;
  size_t begin = 3000;
  size_t size = 12000;
  err = esp_partition_mmap(p, begin, size, SPI_FLASH_MMAP_DATA,
                    (const void **)&mmap_data, &mmap_handle);

  if (err != ESP_OK){
    printf("Error erasing data range.");
    return;
  }

  srand(0);
  for (size_t offset = 0; offset < p->size; offset += block_size) {
      block_size = ((rand() + 4) % max_size) & (~0x3);
      size_t left = p->size - offset;
      if (block_size > left) {
          block_size = left;
      }
      for (size_t i = 0; i < block_size / 4; ++i) {
          size_t pos = offset + i * 4;
          uint32_t expected = rand();
          if (pos < begin || pos >= (begin + size)) {
              continue;
          }
          uint32_t val= mmap_data[(pos - begin) / 4];
          if (val != expected){
            printf("%ld != %ld\n", val, expected);
            return;
          }

      }
  }

  spi_flash_munmap(mmap_handle);
  printf("DONE.\n");
}

void list_partitions(){
  esp_partition_iterator_t it = esp_partition_find(ESP_PARTITION_TYPE_DATA, ESP_PARTITION_SUBTYPE_ANY, NULL);
    const esp_partition_t* prev = NULL;
    for (; it != NULL; it = esp_partition_next(it)) {
        const esp_partition_t *p = esp_partition_get(it);
        if (p == NULL) {
          printf("Partition not found\n" );
        }
        else{
              printf("Partition found: %s size: %d type %d\n", p->label, p->size, p->subtype);
        }
    }
    it = esp_partition_find(ESP_PARTITION_TYPE_APP, ESP_PARTITION_SUBTYPE_ANY, NULL);
      for (; it != NULL; it = esp_partition_next(it)) {
          const esp_partition_t *p = esp_partition_get(it);
          if (p == NULL) {
            printf("Partition not found\n" );
          }
          else{
                printf("Partition found: %s size: %d type %d\n", p->label, p->size, p->subtype);
          }
      }
    esp_partition_iterator_release(it);
}


void setup(){
  list_partitions();
  partition_mmap_setup();
}

// ===============================================
// ====  LOOP ====================================
// ===============================================

// state machine with entry actions, state actions and exit actions
void loop()
{
}
